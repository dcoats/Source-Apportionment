gasmatrix<-matrix(NA,120,4)
for(j in 1:120)
{
for(i in 1:4)
{
gasmatrix[j,i]<-gas[j,i]*fgas[j,i]
}
}
gasmatrix
gasprofile<-vector(mode='numeric',120)
gasVA<-vector(mode='numeric',120)
for(i in 1:120)
{
gasprofile[i]<-sum(gasmatrix[i,])
gasVA[i]<-(1/16)*sum((gasunc[i,])^2)
}
gasprofile
gasVA
smokers<-SI[,38:50]     ###creating profile for smoker cars
smokers
smokerunc<-SIunc[,38:50]
is.matrix(smokers)
for (i in 1:13)               ###converting profiles from factors to numeric data
{
smokers[,i]<-as.numeric(as.character(smokers[,i]))
smokerunc[,i]<-as.numeric(as.character(smokerunc[,i]))
smokers[,i]<-smokers[,i]/13
}
smokerp<-matrix(,120,1)
for(i in 1:120)
{
smokerp[i]<-sum(smokers[i,])
}
fsmokers1<-vector(mode="numeric",13)
fsmokers<-matrix(NA,120,13)
for(i in 1:13)
{
fsmokers1[i]<-rnorm(1,.937,sd=.937*cv)
}
for(j in 1:120)
{
for(i in 1:13)
{                     ###All fsmokers(ji) are drawn from a normal(.937,var=.03515625) distribution
fsmokers[j,i]<-fsmokers1[i]
}
}
fsmokers
smokersmatrix<-matrix(NA,120,13)
for(j in 1:120)
{
for(i in 1:13)
{
smokersmatrix[j,i]<-smokers[j,i]*fsmokers[j,i]
}
}
smokersmatrix
sum(smokersmatrix[1,1:13])
smokerprofile<-vector(mode='numeric',120)
smokerVA<-vector(mode='numeric',120)
for(i in 1:120)
{
smokerprofile[i]<-sum(smokersmatrix[i,])
smokerVA[i]<-((1/13)^2)*sum((smokerunc[i,])^2)
}
smokerprofile
smokerVA
diesel<-CI[,8:22]     ###creating profile for diesel vehicles
diesel
dieselunc<-CIunc[,8:22]
is.matrix(diesel)
for (i in 1:15)               ###converting profiles from factors to numeric data
{
diesel[,i]<-as.numeric(as.character(diesel[,i]))
dieselunc[,i]<-as.numeric(as.character(dieselunc[,i]))
diesel[,i]<-diesel[,i]/15
}
dieselp<-matrix(,120,1)
for(i in 1:120)
{
dieselp[i]<-sum(diesel[i,])
}
fdiesel1<-vector(mode="numeric",15)
fdiesel<-matrix(NA,120,15)
for(i in 1:15)
{
fdiesel1[i]<-rnorm(1,2.8125,sd=2.8125*cv)
}
for(j in 1:120)
{
for(i in 1:15)
{                     ###All fdiesel(ji) are drawn from a normal(2.8125,var=.3164) distribution
fdiesel[j,i]<-fdiesel1[i]
}
}
fdiesel
dieselmatrix<-matrix(NA,120,15)
for(j in 1:120)
{
for(i in 1:15)
{
dieselmatrix[j,i]<-diesel[j,i]*fdiesel[j,i]
}
}
dieselmatrix
dieselprofile<-vector(mode='numeric',120)
dieselVA<-vector(mode='numeric',120)
for(i in 1:120)
{
dieselprofile[i]<-sum(dieselmatrix[i,])
dieselVA[i]<-((1/15)^2)*sum((dieselunc[i,])^2)
}
dieselprofile
dieselVA
yfleet1profiles<-matrix(NA,120,3)
yfleet1VA<-matrix(NA,120,3)
yfleet1profiles[,1]<-gasp
yfleet1profiles[,2]<-smokerp
yfleet1profiles[,3]<-dieselp
yfleet1VA[,1]<-gasVA
yfleet1VA[,2]<-smokerVA
yfleet1VA[,3]<-dieselVA
yfleet1profiles
yfleet1VA
yfleet1<-gasprofile+smokerprofile+dieselprofile
species<-as.matrix(SI$X)
species<-species[-(121:124),]
yfleet1
for (i in 1:116)    ####For some reason I usually have to run this a couple times for it to work, and running it in another for loop doesn't fix it,
{                   ####Run until there are 93 species
if (yfleet1[i]==0)
{
species<-species[-i];
yfleet1profiles<-yfleet1profiles[-i,];
yfleet1VA<-yfleet1VA[-i,];
yfleet1<-yfleet1[-i];
}
}
yfleet1
species
yfleet1profiles
#yfleet1profilesp<-matrix(NA,93,3)
yfleet1VA
ysims<-matrix(NA,93,days)
#ysimsp<-matrix(NA,93,days)
ysimsunc<-matrix(NA,93,days)
#for(i in 1:93)
#{
#for(j in 1:3)
#{
#yfleet1profilesp[i,j]<-yfleet1profiles[i,j]/sum(yfleet1profiles[,j])
# }
#}
#yfleet1profilesp
cv<-.2
for (i in 1:93)  ###generating y's distributed lognormally,  profiles for fleet1 over days days
{
for(j in 1:days)
{
ysims[i,j]<-exp(rnorm(1,mean=log(yfleet1[i])-(.5*log(((cv)^2)+1)),sd=sqrt(log(((cv)^2)+1))))
# ysimsp[i,j]<-ysims[i,j]/sum(ysims[,j])
}
}
ysims
EVold <- function(C,VC,A,VA,P,toli=.01,maxit=50,update.A=TRUE,diagmat=FALSE)
## EVold can be used to get solutions to the CMB equations
##    C is the p by n matrix of measured mixtures, where n is the number of different measurements and
##         and p is the number of species/features (n can be 1 here if there is only one p-dimensional
##         mixture measurement)
##    VC is the p by n matrix of measurement uncertainties (or measurement error standard deviations) for
##         each element of C
##    A is the p by k matrix of the k profiles, with the first column being the p-dimensional profile for the
##         first source, etc.
##    VA is the p by k matrix of profile uncertainties (or profile error standard deviations) for each
##         element of A
##    P is an n by n correlation matrix.  For the Effective Variance solution, use P = diag(n)
##    toli specifies max tolerance for checking convergence; default is to stop iterating when relative change in size of estimates
##         is changing by less than 1% (i.e., toli = .01)
##    maxit is maximum number of allowed iterations (default = 50)
##    update.A is a boolean argument indicating whether or not the A matrix should be iteratively update.  For the Effective Variance solution
##         use update.A=FALSE (default is TRUE)
##    diagmat is a boolean argument indicating where or not covariance matrix for the data should be treated as a diagonal matrix.  For the
##         effective variance solution, use diagmat=TRUE (default is FALSE)
##
##  NOTE: For the standard effective variance solution, use P=diag(nrow(C)), update.A=FALSE, diagmat=TRUE
##  NOTE: If VA is a matrix of zeroes, you get the WLS solution.  If VC and VA are both matrices of zeroes, you get the OLS solution.
##
{
convergei <- FALSE
iter <- 0
p <- nrow(C)
n <- ncol(C)
k <- ncol(A)
cat("\n Iteration  MaxError \n")
cat(" __________________ \n")
oldA <- A
oldS <- matrix(0,k,n)
if (diagmat==TRUE) oldVe <- diag(diag( diag(c(VC)) + kronecker( t(oldS) , diag(p) ) %*% diag(c(VA)) %*% kronecker( (oldS) , diag(p) ) ))
if (diagmat==FALSE) oldVe <- diag(c(VC)) + kronecker( t(oldS) , diag(p) ) %*% diag(c(VA)) %*% kronecker( (oldS) , diag(p) )
for (iter in 1:maxit)
{
if (convergei == FALSE)
{
newS <- oldS + matrix( solve( kronecker(diag(n),t(oldA)) %*% solve(oldVe) %*% kronecker(diag(n),oldA) ) %*%
kronecker(diag(n),t(oldA)) %*% solve(oldVe) %*% c(C - A %*% oldS) , k , n)
if (update.A == TRUE)
{
newA <- A + matrix( diag(c(VA)) %*% kronecker( oldS , diag(p) ) %*% solve(oldVe) %*%
( diag(p*n) - kronecker( diag(n) , (oldA) ) %*%
solve(kronecker( diag(n) , t(oldA) ) %*% solve(oldVe) %*% kronecker( diag(n) , (oldA) )) %*%
kronecker( diag(n) , t(oldA) ) %*% solve(oldVe) ) %*% c(  C - A %*% oldS ) , p , k )
}
if (diagmat==TRUE) newVe <- diag(diag( diag(c(VC)) + kronecker( t(newS) , diag(p) ) %*%
diag(c(VA)) %*% kronecker( (newS) , diag(p) ) ))
if (diagmat==FALSE) newVe <- diag(c(VC)) + kronecker( t(newS) , diag(p) ) %*% diag(c(VA)) %*%
kronecker( (newS) , diag(p) )
}
cat(iter, "    ", round(max(abs( (newS - oldS)/oldS ) ),4) ,"\n" )
if (max( abs( (newS - oldS)/oldS ) ) < toli)
{
convergei <- TRUE
if (update.A == TRUE) oldA <- newA
cat("Iteration converged.\n")
break;
}
else
{
oldS <- newS
if (update.A == TRUE) oldA <- newA
oldVe <- newVe
}
}
diagVe <- diag(newVe)
SES <- sqrt( diag( solve(kronecker( diag(n),t(oldA)) %*% solve(newVe) %*% kronecker(diag(n),oldA)) ) )
newSbar <- apply(newS,1,mean)
SESbar <- sqrt( 1/(n^2) * apply( matrix(SES^2,k,n) ,1,sum ) )
#   if (update.A == TRUE) return(newS,SES,newSbar,SESbar,oldA)
#   if (update.A == FALSE) return(newS,SES,newSbar,SESbar)
if (update.A == TRUE) return(list(newS,SES,newSbar,SESbar,oldA))
if (update.A == FALSE) return(list(newS,matrix(SES,k,n,byrow=FALSE),newSbar,SESbar))
}
C<-as.matrix(ysims)
VC<-C*.2
A<-yfleet1profiles
VA<-yfleet1VA
EVold(C,VC,A,VA,diag(nrow(C)),update.A=FALSE,diagmat=TRUE)
yfleet1
for(j in 1:5)
{
for (i in 1:116)    ####For some reason I usually have to run this a couple times for it to work, and running it in another for loop doesn't fix it,
{                   ####Run until there are 93 species
if (yfleet1[i]==0)
{
species<-species[-i];
yfleet1profiles<-yfleet1profiles[-i,];
yfleet1VA<-yfleet1VA[-i,];
yfleet1<-yfleet1[-i];
}
}
}
yfleet1
for(j in 1:5)
{
for (i in 1:116)    ####For some reason I usually have to run this a couple times for it to work, and running it in another for loop doesn't fix it,
{                   ####Run until there are 93 species
if (yfleet1[i]==0)
{
species<-species[-i];
yfleet1profiles<-yfleet1profiles[-i,];
yfleet1VA<-yfleet1VA[-i,];
yfleet1<-yfleet1[-i];
}
}
}
yfleet1
ysims<-matrix(NA,93,days)
#ysimsp<-matrix(NA,93,days)
ysimsunc<-matrix(NA,93,days)
#for(i in 1:93)
#{
#for(j in 1:3)
#{
#yfleet1profilesp[i,j]<-yfleet1profiles[i,j]/sum(yfleet1profiles[,j])
# }
#}
#yfleet1profilesp
cv<-.2
for (i in 1:93)  ###generating y's distributed lognormally,  profiles for fleet1 over days days
{
for(j in 1:days)
{
ysims[i,j]<-exp(rnorm(1,mean=log(yfleet1[i])-(.5*log(((cv)^2)+1)),sd=sqrt(log(((cv)^2)+1))))
# ysimsp[i,j]<-ysims[i,j]/sum(ysims[,j])
}
}
C<-as.matrix(ysims)
VC<-C*.2
A<-yfleet1profiles
VA<-yfleet1VA
EVold(C,VC,A,VA,diag(nrow(C)),update.A=FALSE,diagmat=TRUE)
warnings()
help(memory.size)
memory.limit(size=60500)
memory.limit()
memory.limit(size=8000)
setwd("C:\\Users\\David Coats\\Documents\\Research for Dr. Christensen\\Source Aportionment\\PMFstuff\\pmf_r_interface")
source("jeff's functions.R")
runpmf<-function(inifilename,data,F,Lambda,Q,sources=5,rows=788,cols=23){
sname<-unlist(strsplit(inifilename,".",fixed=TRUE))[1]
inifile<- readLines(con=inifilename)
inifile[38]<-paste("    30   T \"OLD    \"  2000  \" ",data,"    \"",sep="")
inifile[44]<-paste(" 36   F \"REPLACE\"  2000  \" ",F,"    \"",sep="")
inifile[45]<-paste(" 37   F \"REPLACE\"  2000  \" ",Lambda,"    \"",sep="")
inifile[46]<-paste(" 38   F \"REPLACE\"  2000  \" ",Q,"    \"",sep="")
inifile[40]<-paste(" 32   T \"OLD\"  2000  \" startlam",sources,".txt    \"",sep="")
inifile[7]<-paste("          ",rows,"   ",cols,"    ",sources,"    1",sep="")
writeLines(inifile,con=inifilename)
system(paste("pmf2wtst.exe ",sname,sep=""),show.output.on.console = TRUE,invisible=TRUE)
}
runpmf2 <- function(inifilename,data,F,Lambda,Q,fpeak=0,sources=5,rows=788,cols=23)
{
sname<-unlist(strsplit(inifilename,".",fixed=TRUE))[1]
inifile<- readLines(con=inifilename)
inifile[9] <-paste("     ",fpeak)
inifile[38]<-paste("    30   T \"OLD    \"  2000  \" ",data,"    \"",sep="")
inifile[44]<-paste(" 36   F \"REPLACE\"  2000  \" ",F,"    \"",sep="")
inifile[45]<-paste(" 37   F \"REPLACE\"  2000  \" ",Lambda,"    \"",sep="")
inifile[46]<-paste(" 38   F \"REPLACE\"  2000  \" ",Q,"    \"",sep="")
inifile[40]<-paste(" 32   T \"OLD\"  2000  \" startlam",sources,".txt    \"",sep="")
inifile[7]<-paste("          ",rows,"   ",cols,"    ",sources,"    1",sep="")
writeLines(inifile,con=inifilename)
system(paste("pmf2wtst.exe ",sname,sep=""),show.output.on.console = TRUE,invisible=TRUE)
}
weekendplots<-function(i,name="gkeyw"){
####weekend plots
alldat<-read.table("dataforweekends_2.txt",header=T)
library(survival)
#dates<-seq(1,nrow(data),27)
dates<-alldat[,1]
datess<-alldat[,1]
dates<-as.character(dates)
dates<-as.date(dates)
days<-date.mdy(dates,weekday=TRUE)$weekday
weekdays<-c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")
daycounts<-array(NA,dim=c(i,7,1))
for(ii in 1:i){
for(iii in c(1:7)){
daycounts[ii,iii,1]<-mean(fac[,ii][days==iii])
}
jpeg(filename=mypaste(name,i,ii,".jpg") ,width=400, height=250)
plot(daycounts[ii,,],type="l",xaxt="n",ylab="",xlab=mypaste("Mean by days of week ",i,", ",ii))
axis(1,at=c(1:7),labels=weekdays)
dev.off()}
}
facplots<-function(fac,name="gkeyf",startdate="2001/6/1",enddate="2003/6/6"){
#start on a logical date near the beginning of the data
dates<-getdates()
for(iii in 1:ncol(fac)){
jpeg(filename=mypaste(name,i,iii,".jpg") ,width=700, height=250)
par(cex=1)
plot(dates,fac[,iii],type="l",col="blue",xlab="",xaxt="n",ylab=mypaste(iii," of ",i," factors"))
par(cex=.7)
axis.Date(1,at=seq(as.Date(startdate),as.Date(enddate), "months"),
format="%b-%y",las=2)
dev.off()}
}
gkeyprep<-function(lambdakey,uncertainty,ambienterror="slunc.txt",datamatrix="sldat.txt"){
## with this variant of gkeying I'm using the key as a starting value for lambda, and
## not using a starting value for F (sorting it out would be a pain)
i<-min(dim(lambdakey))
meserror<-read.table(ambienterror)
uncertainty<-rbind(uncertainty,meserror)
write.table(uncertainty,file="keyuncertainties.txt",row.names=FALSE,col.names=FALSE)
#adds a matrix of zeros on top of the starting array F, obtained from a previous run
#zeros<-array(0,dim=c(i,i))
#gnot<-read.table(paste("testfac",i,".txt",sep=""))
#keygnot<-rbind(zeros,gnot)
#write.table(keygnot,file="keygnot.txt",row.names=FALSE,col.names=FALSE)
key<-t(lambdakey)
write.table(key,file=mypaste("startlam",i,".txt"),row.names=FALSE,col.names=FALSE)
data<-read.table(datamatrix)
keydata<-rbind(as.matrix(key),as.matrix(data))
write.table(keydata,file=paste("keydat",i,".txt",sep=""),row.names=FALSE,col.names=FALSE)
}
lamplots<-function(lam,name="gkey"){
for(iii in 1:ncol(lam)){
jpeg(filename=mypaste(name,i,iii,".jpg") ,width=500, height=250)
par(cex=1)
plot(lam[,iii],ylim=c(0,max(lam[,iii])+.05),ylab="",
xlab=mypaste("Source ",i,", ",iii),xaxt="n")
par(cex=.6)
axis(1,at=1:length(lam[,iii]),label=names,las=2)
###  makes a box around significant values
par(cex=1)
for(ii in 1:nrow(lam)){
if(lam[ii,iii]>=.01){
rect(ii-.5,par("usr")[3],ii+.5,par("usr")[4]-.01,col="grey90",border="transparent")
}}
points(lam[,iii],bty="o") #redraws the points on top of the shaded boxes
#end of box maxing
#print(par("usr"))
dev.off()
}
}
getdates<-function(){
#i used excel to get the dates in the right format for R to read
alldat<-read.table("data_for_dates.txt",header=T)
dates<-alldat[,1]
dates<-as.Date(dates)
return(dates)}
getQ<-function(filename){
Q<-readLines(con=filename)
Q<-Q[1]
Q<-unlist(strsplit(Q,"=",fixed=TRUE))[2]
Q<-as.numeric(Q)
return(Q)}
runpmfplain<-function(inifilename,data,prec,F,Lambda,Q,fpeak=0,sources=6,rows=nrow(data),cols=ncol(data)){
sname<-unlist(strsplit(inifilename,".",fixed=TRUE))[1]
inifile<- readLines(con=inifilename)
inifile[9] <-paste("     ",fpeak)
inifile[38] <-paste("    30   T \"OLD    \"  2000  \" ",data,"    \"",sep="")
inifile[39] <-paste("    31   T \"OLD    \"  2000  \" ",prec,"                                       \"",sep="")
inifile[44]<-paste(" 36   F \"REPLACE\"  2000  \" ",F,"    \"",sep="")
inifile[45]<-paste(" 37   F \"REPLACE\"  2000  \" ",Lambda,"    \"",sep="")
inifile[46]<-paste(" 38   F \"REPLACE\"  2000  \" ",Q,"    \"",sep="")
#inifile[40]<-paste(" 32   T \"OLD\"  2000  \" startlam",sources,".txt    \"",sep="")
inifile[7]<-paste("          ",rows,"   ",cols,"    ",sources,"    1",sep="")
writeLines(inifile,con=inifilename)
mywrite.table(data,file="pmf_data.txt",quote=FALSE,na="-999.9")
mywrite.table(prec,file="pmf_unc.txt",quote=FALSE,na="1")
system(paste("pmf2wtst.exe ",sname,sep=""),show.output.on.console = TRUE,invisible=TRUE)
}
setwd("C:\\Users\\David Coats\\Documents\\Research for Dr. Christensen\\Source Aportionment\\PMFstuff\\pmf_r_interface")
source("jeff's functions.R")
#load(".Rdata")
alldat<-read.table("sldat_naremoved.txt",header=T)
data<-cbind(alldat$NAXC,alldat$MGXC,alldat$ALXC,alldat$SIXC,alldat$PHXC,
alldat$SUXC,alldat$CLXC,alldat$KPXC,alldat$CAXC,alldat$TIXC,
alldat$VAXC,alldat$CRXC,alldat$MNXC,alldat$FEXC,alldat$COXC,
alldat$NIXC,alldat$CUXC,alldat$ZNXC,alldat$GAXC,alldat$ASXC,
alldat$SEXC,alldat$BRXC,alldat$RBXC,alldat$SRXC,alldat$YTXC,
alldat$ZRXC,alldat$MOXC,alldat$PDXC,alldat$AGXC,alldat$CDXC,
alldat$INXC,alldat$SNXC,alldat$SBXC,alldat$BAXC,
alldat$LAXC,alldat$AUXC,alldat$HGXC,alldat$TLXC,alldat$PBXC,
alldat$URXC,alldat$OC,alldat$EC,alldat$Sulfate,alldat$Nitrate)
write.table(data,file="sldat.txt",quote=F,na="-999.9",row.names=FALSE,col.names=FALSE)
names<-c("Na","Mg","Al","Si","Ph",
"S","Cl","K","Ca","Ti",
"V","Cr","Mn","Fe","Co",
"Ni","Cu","Zn","Ga","As",
"Se","Br","Rb","Sr","Y",
"Zr","Mo","Pd","Ag","Cd",
"In","Sn","Sb","Ba",
"La","Au","Hg","Tl","Pb",
"U","OC","EC","SO","NO")
########
#
#   Ladies and Gentlemen . . .
#
########
##create a target profile matrix, lambda
#note-- I assume lambda is p by k
lams7<-read.table("lam7.txt")  #the one I was working with
smelter<-apply(lams7[,c(1,3)],1,mean)   #smelter
lambda<-cbind(lams7[,c(2,4,6)],smelter,lams7[,c(5,7)])
i<-min(dim(lambda))
k<-max(dim(lambda))
n<-749
#testing
uncertainty<-array(NA,dim=c(i,k))
uncertainty[1,]<-.0001         #fireworks
uncertainty[2,]<-.01           #summer secondary
uncertainty[3,]<-.01           #winter secondary
uncertainty[4,]<-.1            #smelter (artificial)
uncertainty[5,]<-1           #vehicle
uncertainty[6,]<-1           #vehicle
unc<-read.table("slunc.txt")
dim(unc)
gkeyprep(lambda,uncertainty,"slunc.txt","sldat.txt")     #gets ready to gkey
runpmf("default_gkey_6source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),i,n+i,k)                  # ini file must be set up for gkeying,
runpmf("default_gkey_9source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),i,n+i,k)                  # ini file must be set up for gkeying,
runpmf("default_gkey_6source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),i,n+i,k)                  # ini file must be set up for gkeying,
lams7<-read.table("lam7.txt")  #the one I was working with
smelter<-apply(lams7[,c(1,3)],1,mean)   #smelter
lambda<-cbind(lams7[,c(2,4,6)],smelter,lams7[,c(5,7)])
i<-min(dim(lambda))
k<-max(dim(lambda))
n<-749
#testing
uncertainty<-array(NA,dim=c(i,k))
uncertainty[1,]<-.0001         #fireworks
uncertainty[2,]<-.01           #summer secondary
uncertainty[3,]<-.01           #winter secondary
uncertainty[4,]<-.1            #smelter (artificial)
uncertainty[5,]<-1           #vehicle
uncertainty[6,]<-1           #vehicle
unc<-read.table("slunc.txt")
dim(unc)
gkeyprep(lambda,uncertainty,"slunc.txt","sldat.txt")     #gets ready to gkey
runpmf("default_gkey_6source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),i,n+i,k)
runpmf2("default_gkey_6source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),fpeak= -0.1,i,n+i,k)        #   if no gkeying is used, change "keydat" to "sldat"
runpmf("default_gkey_6source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),i,n+i,k)                  # ini file must be set up for gkeying,
runpmf("default_gkey_6source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),i,n+i,k)                  # ini file must be set up for gkeying,
gkeyprep(lambda,uncertainty,"slunc.txt","sldat.txt")     #gets ready to gkey
runpmf("default_gkey_6source.ini",mypaste("keydat",i,".txt"),mypaste("testfac",i,".txt"),mypaste("testlam",i,".txt"),
mypaste("testq",i,".txt"),i,n+i,k)                  # ini file must be set up for gkeying,
